{"name":"Insider API Documentation","tagline":"Api documentation for Insider.in","body":"#Domain \r\nAll API's run against the endpoint [API GATEWAY](http://api.insider.in)\r\n\r\n##LISTING API\r\n\r\n###Access Enpoint\r\n</tag/list>\r\n\r\nReturns a list of active events ordered by recent show time for the tags supplied in the url params. The request must be accompanied by an appropriate API-KEY header value.\r\n\r\n<URL Params>\r\n\r\n- models (Required, multiple allowed)\r\nCan be either cell, event or both can be specified. Internally, models map to their eponymous content structures and data associated with the specified models will only be returned. Third parties can usually restrict to using models=event only.\r\n\r\nSingle usage example\r\n\r\n/tag/list?tags=mumbai&models=event\r\n\r\nMultiple usage\r\n\r\n/tag/list?tags=mumbai&models=event&models=cell\r\n\r\ntags (Required, multiple allowed)\r\n\r\n- Slug (Required, multiple allowed)\r\n\r\nName of the tag for which taggables are requested. For cities, slugs are, usually, lowercased name of the city. Venue, festival, artist or any other valid tag’s slug can also be used\r\n\r\nSingle usage example\r\n\r\nhttp://insider.in/tag/list?tags=bangalore\r\n\r\nMultiple usage example\r\n\r\nhttp://insider.in/tag/list?tags=bangalore&tags=mumbai\r\n\r\n- Operator (Optional, single valued, default ‘or’)\r\n\r\nOperator allows API consumer to specify, in case of multiple tags, whether to return a union of events for tags or an intersection.  A value of or returns union of events for multiple tags and a value of and returns intersection of events.\r\n\r\nUsage example (Return intersection of events in bangalore and comedy)\r\n\r\nhttp://insider.in/tag/list?tags=bangalore&tags=comedy&operator=and\r\n\r\n###API Response\r\n\r\nThe content type of the response will be application/json. The top-level structure of the response will contain the following fields.\r\n`{\r\n\t“status”: “ok”,\r\n\t“reason”: “success”,\r\n\t“data”: {\r\n\t\t“meta”: [ ],\r\n\t\t“carousel”: [ ],\r\n\t\t“featured”: [ ],\r\n\t\t“list”: [ ],\r\n\t\t“categories”: [ ]\r\n        }\r\n}`\r\n\r\nField | Data Type | Description \r\n------|------|------\r\nstatus | String| “ok” if the request was successful\r\nreason | String | “success” if the request was successful, otherwise will contain a message describing the error.\r\ndata | Object | Wrapper containing API response\r\nmeta | Array | Data relating to the tags requested. The list will contain one object for each tag requested.\r\ncarousel | Array | List of events on the carousel for given tags and operator combination. Will contain one object for each event.\r\nfeatured | Array | List of events featured for given tags and operator combination. Will contain one object for each event.\r\nlist | Array | List of events in ascending order of their show time for the given tags and operator combination. Will contain one object for each event.\r\ncategories | Array | List of genre associated with events in the list.\r\n\r\nNote that, the object contained in each of - list, featured and carousel - will have the same structure. The structure itself is defined later in the document.\r\n\r\nIn case of a tag being requested is not found in the system, the endpoint will respond with an HTTP 404 error message along with relevant details.\r\n\r\n<Description of each item in the list>\r\n\r\nAs mentioned earlier, each object in - list, featured and carousel - will have the same structure with the following fields.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}